set hive.exec.dynamic.partition = true;
set hive.exec.dynamic.partition.mode=nonstrict;
set hive.enforce.bucketing = true;


CREATE TABLE IF NOT EXISTS temp_customers
(
    id                string,
    customer_id       string,
    company           string,
    email             string,
    subscription_date date,
    year              int,
    group_id          int
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n' STORED AS TEXTFILE
tblproperties("skip.header.line.count"="1");

CREATE TABLE IF NOT EXISTS temp_people
(
    id                string,
    user_id           string,
    email             string,
    date_of_birth     date,
    group_id          string
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n' STORED AS TEXTFILE
tblproperties("skip.header.line.count"="1");

CREATE TABLE IF NOT EXISTS temp_organizations
(
    id                  string,
    organization_id     string,
    name                string,
    group_id            string
)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n' STORED AS TEXTFILE
tblproperties("skip.header.line.count"="1");

LOAD DATA INPATH '/user/test/files/customers.csv' OVERWRITE INTO TABLE temp_customers;
LOAD DATA INPATH '/user/test/files/people.csv' OVERWRITE INTO TABLE temp_people;
LOAD DATA INPATH '/user/test/files/organizations.csv' OVERWRITE INTO TABLE temp_organizations;

CREATE TABLE IF NOT EXISTS customers
(
    id                int,
    customer_id       string,
    company           string,
    email             string,
    subscription_date date
)
PARTITIONED BY (year int, group_id int)
CLUSTERED BY (id) INTO 10 BUCKETS
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';

CREATE TABLE IF NOT EXISTS people
(
    id int,
    user_id string,
    email   string,
    date_of_birth     date
)
PARTITIONED BY (group_id int)
CLUSTERED BY (id) INTO 10 BUCKETS
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';

CREATE TABLE IF NOT EXISTS organizations
(
    id                  int,
    organization_id     string,
    name                string
)
PARTITIONED BY (group_id int)
CLUSTERED BY (id) INTO 10 BUCKETS
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';

INSERT INTO customers partition (group_id, year) select * from temp_customers;
INSERT INTO people partition (group_id) select * from temp_people;
INSERT INTO organizations partition (group_id) select * from temp_organizations;

-- Итоговая витрина
WITH 
max_sub AS (
    SELECT 
        company,
        subscrip_year, 
        age_group,
        cnt,
        MAX(cnt) OVER (PARTITION BY company, subscrip_year) AS max_cnt
    FROM(
        SELECT 
            company, 
            subscrip_year, 
            age_group, 
            COUNT(age_group) as cnt
        FROM(
            SELECT
                c.company,
                c.year as subscrip_year,
                CASE
                    WHEN year(`current_date`()) - year(p.date_of_birth) between 0 and 18
                    THEN '0-18'
                    WHEN year(`current_date`()) - year(p.date_of_birth) between 19 and 25
                    THEN '18-25'
                    WHEN year(`current_date`()) - year(p.date_of_birth) between 26 and 35
                    THEN '25-35'
                    WHEN year(`current_date`()) - year(p.date_of_birth) between 36 and 45
                    THEN '35-45'
                    WHEN year(`current_date`()) - year(p.date_of_birth) between 46 and 55
                    THEN '45-55'
                    WHEN year(`current_date`()) - year(p.date_of_birth) between 56 and 65
                    THEN '55-65'
                    WHEN year(`current_date`()) - year(p.date_of_birth) > 65
                    THEN 'more 65'
                END AS age_group
                FROM people p
                INNER JOIN customers c 
                    ON p.email = c.email
                ) AS t
        GROUP BY 
            company, 
            subscrip_year, 
            age_group
        ) AS tt
)

SELECT 
    company, 
    subscrip_year, 
    age_group
FROM max_sub
WHERE cnt = max_cnt
ORDER BY company, subscrip_year;
